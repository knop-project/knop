knop_form
=========

.. class:: knop_form

    .. method:: _unknowntag(index::integer =?)

    .. method:: actionpath()

    .. method:: actionpath=(actionpath)

    .. method:: adderror(fieldname)

        Adds the name for a field that has validation error, used for custom field
        validation. calls form -> validate first if needed
        
    .. method:: addfield(-type, -name =?, -label =?, -value =?, -id =?, -dbfield =?, -hint =?, -options =?, -multiple =?, -linebreak =?, -default =?, -size::integer =?, -maxlength::integer =?, -rows::integer =?, -cols::integer =?, -focus =?, -class =?, -labelclass =?, -disabled =?, -raw =?, -confirmmessage =?, -required =?, -validate =?, -filter =?, -nowarning =?, -op::string =?, -logical_op::string =?, -after =?)

    .. method:: addfield(type::string, name::string =?, label =?, value =?, id =?, dbfield =?, hint =?, options =?, default =?, size =?, maxlength =?, rows =?, cols =?, class =?, labelclass =?, raw =?, confirmmessage =?, validate =?, filter =?, after =?, required =?, nowarning =?, op::string =?, logical_op::string =?, multiple =?, linebreak =?, focus =?, disabled =?)

        Inserts a form element in the form.
        
        Parameters:
        	- type (required)
        
        		Supported types are listed in form -> 'validfieldtypes'. Also
        		custom field types addbuton, savebutton or deletebutton are
        		supported (translated to submit buttons with predefined names).
        
        		For the field types html, fieldset and legend use -value to specify
        		the data to display for these fields. A legend field automatically
        		creates a fieldset (closes any previously open fieldsets). Use
        		fieldset with -value = false to close a fieldset without opening a
        		new one.
        
        	- name (optional)
        
        		Required for all input types except addbuton, savebutton,
        		deletebutton, fieldset, legend and html
        
        	- id (optional)
        
        		id for the html object, will be autogenerated if not specified
        
        	- dbfield (optional)
        
        		Corresponding database field name (name is used if dbfield is not
        		specified), or null/emtpy string if ignore this field for database
        
        	- value (optional)
        
        		Initial value for the field
        
        	- hint (optional)
        
        		Optional gray hint text to show in empty text field
        
        	- options (optional)
        
        		For select, checkbox and radio, must be array or set. For select,
        		the array can contain -optgroup = label to create an optiongroup.
        
        	- multiple (optional flag)
        
        		Used for select
        
        	- linebreak (optional flag)
        
        		Put linebreaks between checkbox and radio values
        
        	- default (optional)
        
        		Default text to display in a popup menu, will be selected (with
        		empty value) if no current value is set. Is followed by an empty
        		option.
        
        	- label (optional)
        
        		Text label for the field
        
        	- size (optional)
        
        		Used for text and select
        
        	- maxlength (optional)
        
        		Used for text
        
        	- rows (optional)
        
        		Used for textarea
        
        	- cols (optional)
        
        		Used for textarea
        
        	- focus (optional flag)
        
        		The first text field with this parameter specified will get focus
        		when page loads
        
        	- class (optional)
        
        	- disabled (optional flag)
        
        		The form field will be rendered as disabled
        
        	- raw (optional)
        
        		Raw attributes that will be put in the html tag
        
        	- confirmmessage (optional)
        
        		Message to show in submit/reset confirm dialog (delete button always
        		shows confirm dialog)
        
        	- required (optional flag)
        
        		If specified then the field must not be empty (very basic validation)
        
        	- validate (optional)
        
        		Compound expression to validate the field input. The input can be
        		accessed as params inside the expression which should either return
        		true for valid input or false for invalid, or return 0 for valid
        		input or a non-zero error code or error message string for invalid
        		input. 
        
        	- filter (optional)
        
        		Compound expression to filter the input before it is loaded into the
        		form by ->loadfields. The field value can be accessed as params
        		inside the expression which should return the filtered field value.
        		-filter is applied before validation. 
        
        	- nowarning (optional flag)
        
        		If specified then changing the field will not trigger an unsaved warning
        
        	- after (optional)
        
        		Numeric index or name of field to insert after
        
    .. method:: afterhandler(headscript::string =?, endscript::string =?)

        Internal member tag. Adds needed javascripts through an atend handler that will be processed when the entire page is done.
        
        Parameters:
        	- headscript (optional)
        
        		A single script, will be placed before </head>  (or at top of page if </head> is missing)
        	
        	- endscript (optional)
        
        		Multiple scripts (no duplicates), will be placed before </body> (or at end of page if </body> is missing)
        
    .. method:: backtickthis(n)

        Internal method used by searchfields to prep db field names
        
    .. method:: buttontemplate()

    .. method:: buttontemplate=(buttontemplate::string)

    .. method:: class()

    .. method:: class=(class::string)

    .. method:: clearfields()

        Empties all form field values
        
    .. method:: clientparams()

    .. method:: clientparams=(clientparams::staticarray)

    .. method:: copyfield(name, newname)

        Copies a form field to a new name.
        
    .. method:: database()

    .. method:: database=(database)

    .. method:: db_keyvalue()

    .. method:: db_keyvalue=(db_keyvalue)

    .. method:: db_lockvalue()

    .. method:: db_lockvalue=(db_lockvalue)

    .. method:: enctype()

    .. method:: enctype=(enctype)

    .. method:: end_rendered()

    .. method:: end_rendered=(end_rendered)

    .. method:: entersubmitblock()

    .. method:: entersubmitblock=(entersubmitblock)

    .. method:: error_code()

    .. method:: error_lang()

    .. method:: error_lang=(error_lang)

    .. method:: errorclass()

    .. method:: errorclass=(errorclass::string)

    .. method:: errors()

        Returns an array with fields that have input errors, or empty array if no errors or form has not been validated
        
    .. method:: errors=(errors)

    .. method:: exceptionfieldtypes()

    .. method:: exceptionfieldtypes=(exceptionfieldtypes::map)

    .. method:: fields()

    .. method:: fields=(fields::array)

    .. method:: fieldset()

    .. method:: fieldset=(fieldset)

    .. method:: fieldsource()

    .. method:: fieldsource=(fieldsource)

    .. method:: formaction()

    .. method:: formaction=(formaction)

    .. method:: formbutton()

    .. method:: formbutton=(formbutton)

    .. method:: formid()

    .. method:: formid=(formid)

    .. method:: formmode()

        Returns add or edit after form -> init has been called
        
    .. method:: formmode=(formmode)

    .. method:: getbutton()

        Returns what button was clicked on the form on the previous page. Assumes that submit buttons are named button_add etc.
        Returns add, update, delete, cancel or any custom submit button name that begins with button\_.
        
    .. method:: getlabel(name::string)

        Returns the label for a form field.
        
    .. method:: getvalue(name::string, -index::integer =?)

    .. method:: getvalue(name::string, index::integer =?)

        Returns the current value of a form field. Returns an array for repeated form fields.
        
    .. method:: id()

    .. method:: id=(id)

    .. method:: init(-get =?, -post =?, -keyvalue =?)

    .. method:: init(get =?, post =?, keyvalue =?)

        Initiates form to grab keyvalue and set formmode if we have a database connected
        to the form. Does nothing if no database is specified.
        
    .. method:: isvalid()

        Returns the result of form -> validate (true/false) without performing the
        validation again (unless it hasn\'t been performed already)
        
    .. method:: keyparamname()

    .. method:: keyparamname=(keyparamname::string)

    .. method:: keys()

        Returns an array of all field names
        
    .. method:: keyvalue()

    .. method:: legend()

    .. method:: legend=(legend)

    .. method:: loadfields(-params =?, -post =?, -get =?, -inlinename =?, -database =?)

    .. method:: loadfields(params =?, post =?, get =?, inlinename =?, database =?)

        Overwrites all field values with values from either database, action_params or explicit -params.
        Auto-detects based on current lasso_currentaction.
        
        Parameters:\n\
        	-params (optional)
        
        		Array or map to take field values from instead of database or submit
        		(using dbnames)
        
        	-get (optional flag)
        
        		Only getparams will be used
        
        	-post (optional flag)
        
        		Only postparams will be used
        
        	-inlinename (optional)
        
        		The first record in the result from the specified inline will be used as
        		field values
        
        	-database (optional)
        
        		If a database object is specified, the first record from the latest
        		search result of the database object will be used. If -database is
        		specified as flag (no value) and the form object has a database object
        		attached to it, that database object will be used.
        
    .. method:: lockvalue()

    .. method:: lockvalue_decrypted()

    .. method:: method()

    .. method:: method=(method)

    .. method:: name()

    .. method:: name=(name)

    .. method:: noautoparams()

    .. method:: noautoparams=(noautoparams)

    .. method:: noscript()

    .. method:: noscript=(noscript)

    .. method:: onconvert()

        Outputs the form data in very basic form, just to see what it contains
        
    .. method:: oncreate(-formaction =?, -method =?, -name =?, -id =?, -raw =?, -actionpath =?, -fieldset::boolean =?, -legend =?, -entersubmitblock =?, -noautoparams =?, -template::string =?, -buttontemplate::string =?, -required::string =?, -class::string =?, -errorclass::string =?, -unsavedmarker::string =?, -unsavedmarkerclass::string =?, -unsavedwarning::string =?, -keyparamname::string =?, -noscript =?, -database =?)

    .. method:: oncreate(formaction =?, method =?, name =?, id =?, raw =?, actionpath =?, fieldset::boolean =?, legend =?, entersubmitblock =?, noautoparams =?, template::string =?, buttontemplate::string =?, required::string =?, class::string =?, errorclass::string =?, unsavedmarker::string =?, unsavedmarkerclass::string =?, unsavedwarning::string =?, keyparamname::string =?, noscript =?, database =?)

        Parameters:\n\
        	- formaction (optional)
        
        		The action attribute in the form html tag
        
        	- method (optional)
        
        		Defaults to post
        
        	- name (optional)
        
        	- id (optional)
        
        	- raw (optional)
        
        		Anything in this parameter will be put in the opening form tag
        
        	- actionpath (optional)
        
        		Knop action path
        
        	- fieldset (optional)
        
        	- legend (optional string)
        
        		Legend for the entire form - if specified, a fieldset will also be wrapped around the form
        
        	- entersubmitblock (optional)
        
        	- noautoparams (optional)
        
        	- template (optional string)
        
        		Html template, defaults to #label# #field##required#<br>
        
        	- buttontemplate (optional string)
        
        		Html template for buttons, defaults to #field# but uses -template if specified
        
        	- required (optional string)
        
        		Character(s) to display for required fields (used for #required#), defaults to *
        
        	- class (optional string)
        
        		CSS class name that will be used for the form element, default none
        
        	- errorclass (optional string)
        
        		CSS class name that will be used for the label to highlight input errors, if not defined style="color: red" will be used
        
        	- unsavedmarker (optional string)
        
        		ID for html element that should be used to indicate when the form becomes dirty.
        
        	- unsavedmarkerclass (optional string)
        
        		Class name to use for the html element. Defaults to "unsaved".
        
        	- unsavedwarning (optional string)
        
        	- keyparamname (optional)
        
        	- noscript (optional flag)
        
        		If specified, don't inject any javascript in the form. This will disable all client side functionality such as hints, focus and unsaved warnings.
        
        	- database (optional database)
        
        		Optional database object that the form object will interact with
        
        
    .. method:: process(user =?, lock =?, keyvalue =?)

        Automatically handles a form submission and handles add, update, or delete.
        Requires that a database object is specified for the form
        
    .. method:: raw()

    .. method:: raw=(raw)

    .. method:: removeField(-name::string)

    .. method:: removeField(name::string)

        Removes all form elements with the specified name from the form
        
    .. method:: render_fieldset2_open()

    .. method:: render_fieldset2_open=(render_fieldset2_open)

    .. method:: render_fieldset_open()

    .. method:: render_fieldset_open=(render_fieldset_open)

    .. method:: renderform(-name::string =?, -from =?, -to =?, -type =?, -excludetype =?, -legend::string =?, -start::boolean =?, -end::boolean =?, -onlyformcontent::boolean =?, -xhtml::boolean =?)

    .. method:: renderform(name::string =?, from =?, to =?, type =?, excludetype =?, legend::string =?, xhtml::boolean =?, onlyformcontent::boolean =?)

        Outputs HTML for the form fields, a specific field, a range of fields or all
        fields of a specific type. Also inserts all needed javascripts into the page.
        Use form -> setformat first to specify the html format, otherwise default
        format #label# #field##required#<br> is used.
        
        Parameters:
        	- name (optional)
        
        		Render only the specified field
        
        	- from (optional)
        
        		Render form fields from the specified number index or field name. Negative number count from the last field.
        
        	- to (optional)
        
        		Render form fields to the specified number index or field name. Negative number count from the last field.
        
        	- type (optional)
        
        		Only render fields of this or these types (string or array)
        
        	- excludetype (optional)
        
        		Render fields except of this or these types (string or array)
        
        	- legend (optional)
        
        		Groups the rendered fields in a fieldset and outputs a legend for the fieldset
        
        	- start (optional)
        
        		Only render the starting <form> tag
        
        	- end (optional)
        
        		Only render the ending </form> tag
        
        	- xhtml (optional flag)
        
        		XHTML valid output
        
    .. method:: renderformend(xhtml::boolean =?)

    .. method:: renderformstart(xhtml::boolean =?)

    .. method:: renderhtml(-name =?, -from =?, -to =?, -type =?, -excludetype =?, -legend::string =?, -xhtml::boolean =?)

    .. method:: renderhtml(name::string =?, from =?, to =?, type =?, excludetype =?, legend::string =?, xhtml::boolean =?)

        Outputs form data as plain HTML, a specific field, a range of fields or all fields of a specific type.
        Some form field types are excluded, such as submit, reset, file etc.
        Use form -> setformat first to specify the html format, otherwise default format #label#: #field#<br> is used.
        
        Parameters:
        	- name (optional)
        
        		Render only the specified field
        
        	- from (optional)
        
        		Render fields from the specified number index or field name
        
        	- to (optional)
        
        		Render fields to the specified number index or field name
        
        	- type (optional)
        
        		Only render fields of this or these types (string or array)
        
        	- excludetype (optional)
        
        		Render fields except of this or these types (string or array)
        
        	- legend (optional)
        
        		Groups the rendered fields in a fieldset and outputs a legend for the fieldset
        
        	- xhtml (optional flag)
        
        		XHTML valid output
        
    .. method:: required()

    .. method:: required=(required::string)

    .. method:: reseterrors()

        Empties the error array as if no errors was found
        
    .. method:: resetfields()

        Resets all form field values to their initial values
        
    .. method:: search_type()

    .. method:: search_type=(search_type)

    .. method:: searchfields(-sql::boolean =?, -params::boolean =?)

    .. method:: searchfields(sql::boolean =?, params::boolean =?)

        Returns an array with fieldname = value, or optionally SQL string to be used in a search inline.
        form -> loadfields must be called first.
        
    .. method:: setformat(-template::string =?, -buttontemplate::string =?, -required::string =?, -legend::string =?, -class::string =?, -errorclass::string =?, -unsavedmarker::string =?, -unsavedmarkerclass::string =?, -unsavedwarning::string =?)

    .. method:: setformat(template::string =?, buttontemplate::string =?, required::string =?, legend::string =?, class::string =?, errorclass::string =?, unsavedmarker::string =?, unsavedmarkerclass::string =?, unsavedwarning::string =?)

        Defines a html template for the form. 
        
        Parameters:
        
        	-template (optional string)
        
        		Html template, defaults to #label# #field##required#<br>
        
        	-buttontemplate (optional string)
        
        		Html template for buttons, defaults to #field#
        
        	-required (optional string)
        
        		Character(s) to display for required fields (used for #required#), defaults to *
        
        	-legend (optional string)
        
        		Legend for the entire form - if specified, a fieldset will also be wrapped around the form
        
        	-class (optional string)
        
        		CSS class name that will be used for the form element, default none
        
        	-errorclass (optional string)
        
        		CSS class name that will be used for the label to highlight input errors, if not defined style="color: red" will be used
        
        	-unsavedmarker (optional string) 
        
        	-unsavedmarkerclass (optional string) 
        
        	-unsavedwarning (optional string)
        
    .. method:: setparam(-name::string, -param::string, -value, -index::integer =?)

    .. method:: setparam(name::string, param::string, value, index::integer =?)

        Sets the param content for a form field.
        
    .. method:: setvalue(name, value =?, index::integer =?)

        Sets the value for a form field.
        Either ``form -> (setvalue: fieldname = newvalue)`` or ``form -> (setvalue: -name = fieldname, -value = newvalue)``
        
    .. method:: start_rendered()

    .. method:: start_rendered=(start_rendered)

    .. method:: template()

    .. method:: template=(template::string)

    .. method:: unsavedmarker()

    .. method:: unsavedmarker=(unsavedmarker)

    .. method:: unsavedmarkerclass()

    .. method:: unsavedmarkerclass=(unsavedmarkerclass)

    .. method:: unsavedwarning()

    .. method:: unsavedwarning=(unsavedwarning::string)

    .. method:: updatefields(sql::boolean =?)

        Returns a pair array with fieldname = value, or optionally SQL string to be used in an update inline.
        form -> loadfields must be called first.
        
    .. method:: validate()

        Performs validation and fills a transient array with field names that have input
        errors. form -> loadfields must be called first.
        
    .. method:: validfieldtypes()

    .. method:: validfieldtypes=(validfieldtypes::map)

    .. method:: version()

    .. method:: version=(version)

